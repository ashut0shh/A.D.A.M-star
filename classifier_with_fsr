#include <EEPROM.h>
#include <math.h>

// Pin mapping for ATtiny (change for your wiring)
const int FSR1_PIN = 2; // A2 = PB4 = Pin 3
const int FSR2_PIN = 1; // A1 = PB2 = Pin 7

// Calibration constants
const float BASELINE_1 = 0.0;
const float MAX_SIGNAL_1 = 510.0;
const float BASELINE_2 = 0.0;
const float MAX_SIGNAL_2 = 516.0;

const int NUM_SAMPLES = 10;
const int MAX_ADC = 1023;
const int EEPROM_SIZE = EEPROM.length();

int eepromAddress = 0; // Where to store next value

void setup() {
  // If EEPROM uninitialized, reset address to 0
  if (EEPROM.read(0) == 255) {
    for (int i = 0; i < EEPROM_SIZE; i++) {
      EEPROM.write(i, 255); // Clear EEPROM
    }
    eepromAddress = 0;
  } else {
    // Optionally find next empty spot
    eepromAddress = findNextEmptyAddress();
  }
}

void loop() {
  float raw1, raw2;

  float norm1 = getNormalizedForce(FSR1_PIN, BASELINE_1, MAX_SIGNAL_1, raw1);
  float norm2 = getNormalizedForce(FSR2_PIN, BASELINE_2, MAX_SIGNAL_2, raw2);
  float avgNorm = (norm1 + norm2) / 2.0;

  // Classification
  byte gripClass;
  if (avgNorm < 0.33)
    gripClass = 0;
  else if (avgNorm < 0.66)
    gripClass = 1;
  else
    gripClass = 2;

  // Store in EEPROM if space left
  if (eepromAddress < EEPROM_SIZE) {
    EEPROM.write(eepromAddress, gripClass);
    eepromAddress++;
  } else {
    // Wrap around if full
    eepromAddress = 0;
    EEPROM.write(eepromAddress, gripClass);
  }

  delay(100); // Adjust sampling rate
}

float getNormalizedForce(int pin, float baseline, float maxSignal, float& outRawSignal) {
  long sum = 0;
  for (int i = 0; i < NUM_SAMPLES; i++) {
    sum += analogRead(pin);
  }

  float avg = sum / float(NUM_SAMPLES);
  float inverted = MAX_ADC - avg;
  float signal = inverted - baseline;

  if (signal < 0) signal = 0;
  outRawSignal = signal;

  float norm = signal / maxSignal;
  if (norm > 1.0) norm = 1.0;

  return pow(norm, 1.3); // Apply curve
}

int findNextEmptyAddress() {
  for (int i = 0; i < EEPROM_SIZE; i++) {
    if (EEPROM.read(i) == 255) {
      return i;
    }
  }
  return EEPROM_SIZE; // No space found
}
